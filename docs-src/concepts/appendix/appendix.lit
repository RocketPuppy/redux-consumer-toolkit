@title Appendix

@s Library Entry-point

I need to define an entry-point file for the library so that NPM can package it
properly.

I want the library to be usable by importing specific modules to aid in
self-documenting code.

--- index.js
import Functor from './Functor';
import Apply from './Apply';
import Applicative from './Applicative';
import Profunctor from './Profunctor';
import Chain from './Chain';
import Monoid from './Monoid';

export {
  Functor,
  Apply,
  Applicative,
  Profunctor,
  Chain,
  Monoid
};
---

However I also want to allow users to just import all the functions if they wish.

--- index.js --- +=
export default {
  ...Functor,
  ...Apply,
  ...Applicative,
  ...Profunctor,
  ...Chain,
  ...Monoid
};
---

@s Utility Functions

I use a version of function composition throughout the examples. It is defined as follows.

--- compose
const compose = (f, g) => (...args) => f(g(...args))
---

The constant function is mentioned occasionally. It is defined with a type signature as follows.

--- constant
type Constant<A, B> = (a) => (b) => a
const constant : Constant<*,*> = x => y => x
---

The identity function is a useful function and appears in some of the laws for the interfaces.

--- identity
const identity = (x) => x
---

The filter function is used in some examples

--- filter
const filter = (f, c) => (
  c.reduce((memo, x) => (
    f(x) ? memo.concat(x) : memo
  ), [])
);
---
