@title Appendix

@s Library Entry-point

I need to define an entry-point file for the library so that NPM can package it
properly.

I want the library to be usable by importing specific modules to aid in
self-documenting code.

--- index.js
@{import-functor}
@{import-apply}
@{import-applicative}
@{import-profunctor}
@{import-chain}
@{import-monoid}
@{import-semigroup}

export {
  Functor,
  Apply,
  Applicative,
  Profunctor,
  Chain,
  Monoid,
  Semigroup
};
---

However I also want to allow users to just import all the functions if they wish.

--- index.js --- +=
const { map } = Functor;
const { apAll } = Apply;
const { of } = Applicative;
const { promap, mapIn, objectify } = Profunctor;
const { chain, expandAll, combine } = Chain;
const { identity } = Monoid;
const { concat } = Semigroup;

export {
  map,
  apAll,
  of,
  promap,
  mapIn,
  objectify,
  chain,
  expandAll,
  combine,
  identity,
  concat
};
---

@s Utility Functions

I use a version of function composition throughout the examples. It is defined as follows.

--- compose
const compose = (f, g) => (...args) => f(g(...args))
---

The constant function is mentioned occasionally. It is defined with a type signature as follows.

--- constant
type Constant<A, B> = (a) => (b) => a
const constant : Constant<*,*> = x => y => x
---

The identity function is a useful function and appears in some of the laws for the interfaces.

--- identity
const identity = (x) => x
---

The filter function is used in some examples

--- filter
const filter = (f, c) => (
  c.reduce((memo, x) => (
    f(x) ? memo.concat(x) : memo
  ), [])
);
---
